{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b8108908",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/safa/anaconda3/lib/python3.11/site-packages/torch/cuda/__init__.py:619: UserWarning: Can't initialize NVML\n",
      "  warnings.warn(\"Can't initialize NVML\")\n",
      "/home/safa/anaconda3/lib/python3.11/site-packages/torch/cuda/__init__.py:749: UserWarning: CUDA initialization: The NVIDIA driver on your system is too old (found version 11040). Please update your GPU driver by downloading and installing a new version from the URL: http://www.nvidia.com/Download/index.aspx Alternatively, go to: https://pytorch.org to install a PyTorch version that has been compiled with your version of the CUDA driver. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
      "  return torch._C._cuda_getDeviceCount() if nvml_count < 0 else nvml_count\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "from torchvision import transforms\n",
    "from torchvision.datasets import ImageFolder\n",
    "from torch.utils.data import DataLoader\n",
    "from torch.utils.data import Dataset\n",
    "import os\n",
    "from torchvision.transforms import ToTensor\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "from torch.optim import Adam\n",
    "from tqdm import tqdm\n",
    "from pathlib import Path\n",
    "import statistics as stats\n",
    "import argparse\n",
    "from torch.utils.data import Sampler\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.nn import functional as F\n",
    "from torch.nn.modules import Module\n",
    "# Set device\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Dataset loading\n",
    "transform = transforms.Compose([\n",
    "    transforms.Resize((224, 224)),  # Adjust size depending on your dataset\n",
    "    transforms.ToTensor(),\n",
    "])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f9f14ff4",
   "metadata": {},
   "outputs": [],
   "source": [
    "class FewShotDataset(Dataset):\n",
    "    def __init__(self, data, labels):\n",
    "        self.data = data\n",
    "        self.labels = labels\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.data[idx], self.labels[idx]\n",
    "    \n",
    "\n",
    "class PrototypicalBatchSampler(Sampler):\n",
    "    def __init__(self, labels, classes_per_batch, support_per_class, queries_per_class):\n",
    "        self.labels = labels\n",
    "        self.classes_per_batch = classes_per_batch\n",
    "        self.support_per_class = support_per_class\n",
    "        self.queries_per_class = queries_per_class\n",
    "\n",
    "        self.classes, self.counts = np.unique(self.labels, return_counts=True)\n",
    "        self.indices = {c: np.where(self.labels == c)[0] for c in self.classes}\n",
    "\n",
    "    def __iter__(self):\n",
    "        for _ in range(len(self)):\n",
    "            batch = []\n",
    "            selected_classes = np.random.choice(self.classes, self.classes_per_batch, replace=False)\n",
    "            \n",
    "            for c in selected_classes:\n",
    "                indices = np.random.choice(self.indices[c], self.support_per_class + self.queries_per_class, replace=False)\n",
    "                batch.extend(indices)\n",
    "\n",
    "            yield batch\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.labels) // (self.classes_per_batch * (self.support_per_class + self.queries_per_class))\n",
    "\n",
    "\n",
    "    #Test with other network design\n",
    "\n",
    "\n",
    "class PrototypicalNetwork(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size):\n",
    "        super(PrototypicalNetwork, self).__init__()\n",
    "        self.fc = nn.Sequential(\n",
    "            nn.Linear(input_size, hidden_size),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_size, hidden_size)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Flatten the input tensor if it's not already a flat vector\n",
    "        x = x.view(x.size(0), -1)  # Reshape input to [batch_size, input_size]\n",
    "        return self.fc(x)\n",
    "import torchvision.models as models\n",
    "\n",
    "class ResnetPrototypicalNetwork(nn.Module):\n",
    "    def __init__(self,input_size, hidden_size):\n",
    "        super(ResnetPrototypicalNetwork, self).__init__()\n",
    "        # Load a pre-trained ResNet model\n",
    "        self.resnet = models.resnet18(pretrained=True)\n",
    "        \n",
    "        # Remove the fully connected layer (classifier) to use as a feature extractor\n",
    "        self.features = nn.Sequential(*list(self.resnet.children())[:-1])\n",
    "        \n",
    "        # Flatten the output to [batch_size, 512] before passing to the linear layer\n",
    "        self.additional_layers = nn.Sequential(\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(512, hidden_size)  # Adjust the number here to match ResNet's output\n",
    "        )\n",
    "        \n",
    "\n",
    "    def forward(self, x):\n",
    "        # Extract features using the ResNet backbone\n",
    "        x = self.features(x)\n",
    "        \n",
    "        # Pass through any additional layers\n",
    "        embedding = self.additional_layers(x)\n",
    "        return embedding\n",
    "\n",
    "class Resnet34PrototypicalNetwork(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size):\n",
    "        super(Resnet34PrototypicalNetwork, self).__init__()\n",
    "        # Load a pre-trained ResNet model\n",
    "        self.resnet = models.resnet34(pretrained=True)\n",
    "        \n",
    "        # Remove the fully connected layer (classifier) to use as a feature extractor\n",
    "        self.features = nn.Sequential(*list(self.resnet.children())[:-1])\n",
    "        \n",
    "        # Flatten the output to [batch_size, 512] before passing to the linear layer\n",
    "        self.additional_layers = nn.Sequential(\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(512, hidden_size)  # Adjust the number here to match ResNet's output\n",
    "        )\n",
    "        \n",
    "\n",
    "    def forward(self, x):\n",
    "        # Extract features using the ResNet backbone\n",
    "        x = self.features(x)\n",
    "        \n",
    "        # Pass through any additional layers\n",
    "        embedding = self.additional_layers(x)\n",
    "        return embedding\n",
    "    \n",
    "class VGGPrototypicalNetwork(nn.Module):\n",
    "    def __init__(self, hidden_size, num_classes):\n",
    "        super(VGGPrototypicalNetwork, self).__init__()\n",
    "        # Load a pre-trained VGG model\n",
    "        self.vgg = models.vgg16(pretrained=True)\n",
    "        \n",
    "        # Remove the classifier section to use VGG as a feature extractor\n",
    "        # Features before the classifier in VGG models are accessible via 'features'\n",
    "        self.features = self.vgg.features\n",
    "        \n",
    "        # The VGG model outputs a feature map of size 512x7x7 (for input size 224x224)\n",
    "        # We'll apply AdaptiveAvgPool2d to reduce it to a 512-dimensional vector per image\n",
    "        self.avgpool = self.vgg.avgpool\n",
    "\n",
    "        # Flatten the output and pass it through a new classifier\n",
    "        # Adjust the input size of the linear layer to match VGG's output (512 after pooling)\n",
    "        self.classifier = nn.Sequential(\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(512 * 7 * 7, hidden_size),  # Use 512 as the input size if using AdaptiveAvgPool2d\n",
    "            nn.ReLU(True),\n",
    "            nn.Linear(hidden_size, num_classes)  # Final layer for few-shot learning classification\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Extract features using the VGG backbone\n",
    "        x = self.features(x)\n",
    "        \n",
    "        # Apply the VGG's original average pooling\n",
    "        x = self.avgpool(x)\n",
    "\n",
    "        # Pass through the new classifier\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "    \n",
    "class PrototypicalNetwork2(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size):\n",
    "        super(PrototypicalNetwork, self).__init__()\n",
    "        self.fc = nn.Sequential(\n",
    "            nn.Linear(input_size, hidden_size),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_size, hidden_size)\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        return self.fc(x)\n",
    "\n",
    "\n",
    "    # coding=utf-8\n",
    "\n",
    "\n",
    "import torch\n",
    "import torch.nn.functional as F\n",
    "\n",
    "def class_cluster_loss(prototypes, features, labels, c_values, margin=1.0 ):\n",
    "    \"\"\"\n",
    "    Compute the Class Cluster Loss for a batch.\n",
    "    \n",
    "    :param prototypes: Tensor of shape (num_classes, feature_dim) containing class prototypes\n",
    "    :param features: Tensor of shape (batch_size, feature_dim) containing features of batch samples\n",
    "    :param labels: LongTensor of shape (batch_size,) containing labels of batch samples\n",
    "    :param margin: Float, the margin parameter for the loss calculation\n",
    "    :param c: Float, the central distance parameter for intra-class compactness\n",
    "    :return: Class Cluster Loss value for the batch\n",
    "    \"\"\"\n",
    "    n_classes = prototypes.shape[0]\n",
    "    loss = 0.0\n",
    "    \n",
    "    for i in range(n_classes):\n",
    "        # Selecting the current class prototype and corresponding features and labels\n",
    "        current_prototype = prototypes[i]\n",
    "        class_mask = labels == i\n",
    "        class_features = features[class_mask]\n",
    "        #print(\"Prototype shape:\", current_prototype.shape)\n",
    "        #print(\"Class features shape:\", class_features.shape)\n",
    "\n",
    "        \n",
    "        # Calculating distances from the current class features to its prototype\n",
    "        pos_distances = torch.norm(class_features - current_prototype, p=2, dim=1)\n",
    "        # Calculate c as the mean of these distances\n",
    "        # Calculate c as the mean of these distances\n",
    "        c = pos_distances.mean()\n",
    "        #print('c', c)\n",
    "        # Distance to the farthest positive example\n",
    "        D_pro_max_p = torch.max(pos_distances)\n",
    "        \n",
    "        # Calculating distances to the prototype from features of other classes (negative examples)\n",
    "        neg_mask = ~class_mask\n",
    "        neg_features = features[neg_mask]\n",
    "        neg_distances = torch.norm(neg_features - current_prototype, p=2, dim=1)\n",
    "        \n",
    "        # Distance to the closest negative example\n",
    "        if len(neg_distances) > 0:\n",
    "            D_pro_min_n = torch.min(neg_distances)\n",
    "        else:\n",
    "            # Handling cases where a class might have all the samples in the batch\n",
    "            D_pro_min_n = torch.tensor(0.0).to(features.device)\n",
    "        \n",
    "        # Computing the first term of the CCL\n",
    "        loss += F.relu(D_pro_max_p - D_pro_min_n + margin)\n",
    "        # Ensure you're using the correct 'c' for the current class\n",
    "        current_c = c\n",
    "        # Additional term to ensure the farthest positive is not too far\n",
    "        loss += F.relu(D_pro_max_p - current_c)\n",
    "    \n",
    "    # Averaging the loss over the number of classes\n",
    "    loss /= n_classes\n",
    "    \n",
    "    return loss\n",
    "\n",
    "import torch\n",
    "\n",
    "def calculate_central_distance(prototypes, features, labels):\n",
    "    num_classes = prototypes.shape[0]\n",
    "    c_values = torch.zeros(num_classes, device=prototypes.device)\n",
    "    \n",
    "    for i in range(num_classes):\n",
    "        class_mask = labels == i\n",
    "        #print(class_mask)\n",
    "        class_features = features[class_mask]\n",
    "        \n",
    "        if class_features.nelement() == 0:  # Check if there are no features for the current class\n",
    "            c_values[i] = torch.tensor(0.0, device=prototypes.device)  # Assign nan or another placeholder\n",
    "            continue  # Skip the rest of the loop for this class\n",
    "        \n",
    "        distances = torch.norm(class_features - prototypes[i], dim=1, p=2)\n",
    "        c_values[i] = distances.mean()  # This will not be nan since class_features is not empty\n",
    "\n",
    "    return c_values\n",
    "\n",
    "\n",
    "class PrototypicalLoss(Module):\n",
    "    '''\n",
    "    Loss class deriving from Module for the prototypical loss function defined below\n",
    "    '''\n",
    "    def __init__(self, n_support):\n",
    "        super(PrototypicalLoss, self).__init__()\n",
    "        self.n_support = n_support\n",
    "\n",
    "    def forward(self, input, target):\n",
    "        return prototypical_loss(input, target)#, self.n_support)\n",
    "\n",
    "\n",
    "def euclidean_dist(x, y):\n",
    "    '''\n",
    "    Compute euclidean distance between two tensors\n",
    "    '''\n",
    "    # x: N x D\n",
    "    # y: M x D\n",
    "    n = x.size(0)\n",
    "    m = y.size(0)\n",
    "    d = x.size(1)\n",
    "    if d != y.size(1):\n",
    "        raise Exception\n",
    "\n",
    "    x = x.unsqueeze(1).expand(n, m, d)\n",
    "    y = y.unsqueeze(0).expand(n, m, d)\n",
    "\n",
    "    return torch.pow(x - y, 2).sum(2)\n",
    "\n",
    "margin = 0.5\n",
    "def prototypical_loss(input, target):#, n_support):\n",
    "    '''\n",
    " \n",
    "    Compute the barycentres by averaging the features of n_support\n",
    "    samples for each class in target, computes then the distances from each\n",
    "    samples' features to each one of the barycentres, computes the\n",
    "    log_probability for each n_query samples for each one of the current\n",
    "    classes, of appartaining to a class c, loss and accuracy are then computed\n",
    "    and returned\n",
    "    Args:\n",
    "    - input: the model output for a batch of samples\n",
    "    - target: ground truth for the above batch of samples\n",
    "    - n_support: number of samples to keep in account when computing\n",
    "      barycentres, for each one of the current classes\n",
    "    '''\n",
    "    target_cpu = target.to(device)\n",
    "    input_cpu = input.to(device)\n",
    "    features=input_cpu\n",
    "    support_features, support_labels = features[:n_support], labels[:n_support]\n",
    "    query_features, query_labels = features[n_support:], labels[n_support:]\n",
    "        \n",
    "    def supp_idxs(c):\n",
    "        # FIXME when torch will support where as np\n",
    "        return target_cpu.eq(c).nonzero()[:n_support].squeeze(1)\n",
    "\n",
    "    # FIXME when torch.unique will be available on cuda too\n",
    "    classes = torch.unique(target_cpu)\n",
    "    n_classes = len(classes)\n",
    "    #print('n_classes:',n_classes)\n",
    "    # FIXME when torch will support where as np\n",
    "    # assuming n_query, n_target constants\n",
    "    n_query = target_cpu.eq(classes[0].item()).sum().item() - n_support\n",
    "    #print('n_query:',n_query)\n",
    "    support_idxs = list(map(supp_idxs, classes))\n",
    "\n",
    "    prototypes = torch.stack([input_cpu[idx_list].mean(0) for idx_list in support_idxs])\n",
    "    # FIXME when torch will support where as np\n",
    "    query_idxs = torch.stack(list(map(lambda c: target_cpu.eq(c).nonzero()[n_support:], classes))).view(-1)\n",
    "\n",
    "    query_samples = input.to(device)[query_idxs]\n",
    "    dists = euclidean_dist(query_samples, prototypes)\n",
    "\n",
    "    log_p_y = F.log_softmax(-dists, dim=1).view(n_classes, n_query, -1)\n",
    "\n",
    "    target_inds = torch.arange(0, n_classes, device=device)\n",
    "    target_inds = target_inds.view(n_classes, 1, 1)\n",
    "    target_inds = target_inds.expand(n_classes, n_query, 1).long()\n",
    "   # print('target_inds:',target_inds)\n",
    "\n",
    "    loss_val = -log_p_y.gather(2, target_inds).squeeze().view(-1).mean()\n",
    "    _, y_hat = log_p_y.max(2)\n",
    "    #print('y_hat',y_hat)\n",
    "    acc_val = y_hat.eq(target_inds.squeeze(2)).float().mean()\n",
    "    target_inds = target_inds.squeeze(2)\n",
    "    \n",
    "    c_values = calculate_central_distance(prototypes, support_features, support_labels)\n",
    "    #print(c_values)\n",
    "    # Initialize class cluster loss\n",
    "    cc_loss = 0.0\n",
    "    \n",
    "    # Compute Class Cluster Loss\n",
    "    # Note: Assuming the prototypes calculation and euclidean_dist are defined as before\n",
    "    # Loop over each class to calculate class cluster loss\n",
    "    for i in range(4):#n_classes):\n",
    "        # Assuming calculate_class_cluster_loss function calculates the loss for a single class\n",
    "        cc_loss += class_cluster_loss(prototypes[i], query_features, query_labels, c_values[i],margin)\n",
    "    \n",
    "    # Normalize the class cluster loss by the number of classes\n",
    "    cc_loss /= n_classes\n",
    "    \n",
    "\n",
    "         # Combine the losses\n",
    "    # Here, you might want to add a weighting factor to either loss depending on their importance\n",
    "    total_loss = loss_val + cc_loss  # Adjust this combination based on your needs\n",
    "\n",
    "    \n",
    "    \n",
    "    return total_loss,  acc_val\n",
    "\n",
    "\n",
    "def prototypical_loss(input, target):#, n_support):\n",
    "    '''\n",
    "    Inspired by https://github.com/jakesnell/prototypical-networks/blob/master/protonets/models/few_shot.py\n",
    "\n",
    "    Compute the barycentres by averaging the features of n_support\n",
    "    samples for each class in target, computes then the distances from each\n",
    "    samples' features to each one of the barycentres, computes the\n",
    "    log_probability for each n_query samples for each one of the current\n",
    "    classes, of appartaining to a class c, loss and accuracy are then computed\n",
    "    and returned\n",
    "    Args:\n",
    "    - input: the model output for a batch of samples\n",
    "    - target: ground truth for the above batch of samples\n",
    "    - n_support: number of samples to keep in account when computing\n",
    "      barycentres, for each one of the current classes\n",
    "    '''\n",
    "    target_cpu = target.to(device)\n",
    "    input_cpu = input.to(device)\n",
    "\n",
    "    def supp_idxs(c):\n",
    "        # FIXME when torch will support where as np\n",
    "        return target_cpu.eq(c).nonzero()[:n_support].squeeze(1)\n",
    "\n",
    "    # FIXME when torch.unique will be available on cuda too\n",
    "    classes = torch.unique(target_cpu)\n",
    "    n_classes = len(classes)\n",
    "    #print('n_classes:',n_classes)\n",
    "    # FIXME when torch will support where as np\n",
    "    # assuming n_query, n_target constants\n",
    "    n_query = target_cpu.eq(classes[0].item()).sum().item() - n_support\n",
    "    #print('n_query:',n_query)\n",
    "    support_idxs = list(map(supp_idxs, classes))\n",
    "\n",
    "    prototypes = torch.stack([input_cpu[idx_list].mean(0) for idx_list in support_idxs])\n",
    "    # FIXME when torch will support where as np\n",
    "    query_idxs = torch.stack(list(map(lambda c: target_cpu.eq(c).nonzero()[n_support:], classes))).view(-1)\n",
    "\n",
    "    query_samples = input.to(device)[query_idxs]\n",
    "    dists = euclidean_dist(query_samples, prototypes)\n",
    "\n",
    "    log_p_y = F.log_softmax(-dists, dim=1).view(n_classes, n_query, -1)\n",
    "\n",
    "    target_inds = torch.arange(0, n_classes, device=device)\n",
    "    target_inds = target_inds.view(n_classes, 1, 1)\n",
    "    target_inds = target_inds.expand(n_classes, n_query, 1).long()\n",
    "   # print('target_inds:',target_inds)\n",
    "\n",
    "    loss_val = -log_p_y.gather(2, target_inds).squeeze().view(-1).mean()\n",
    "    _, y_hat = log_p_y.max(2)\n",
    "    #print('y_hat',y_hat)\n",
    "    acc_val = y_hat.eq(target_inds.squeeze(2)).float().mean()\n",
    "    target_inds = target_inds.squeeze(2)\n",
    "    \n",
    "    \n",
    "    return loss_val,  acc_val\n",
    "\n",
    "def compute_prototypes(support_embeddings, support_labels, n_classes):\n",
    "    \"\"\"Compute class prototypes from support set embeddings.\"\"\"\n",
    "    prototypes = []\n",
    "    for i in range(n_classes):\n",
    "        # Extract embeddings belonging to class i\n",
    "        class_embeddings = support_embeddings[support_labels == i]\n",
    "        # Compute the mean of these embeddings\n",
    "        prototype = class_embeddings.mean(0)\n",
    "        prototypes.append(prototype)\n",
    "    return torch.stack(prototypes)\n",
    "\n",
    "def classify_embeddings(query_embeddings, prototypes):\n",
    "    \"\"\"Classify query embeddings based on the nearest class prototype.\"\"\"\n",
    "    # Calculate the distances from each query embedding to each prototype\n",
    "    distances = euclidean_dist(query_embeddings, prototypes)\n",
    "\n",
    "    # Find the index of the nearest prototype for each query embedding\n",
    "    nearest_prototype_indices = distances.argmin(1)\n",
    "\n",
    "    soft_assignments = F.softmax(-distances, dim=1) \n",
    "    \n",
    "    return nearest_prototype_indices,soft_assignments\n",
    "\n",
    "def get_support_set_embeddings(support_loader, proto_net):\n",
    "    \"\"\"Obtain embeddings and labels from the support set.\"\"\"\n",
    "    support_embeddings = []\n",
    "    support_labels = []\n",
    "\n",
    "    proto_net.eval()\n",
    "    with torch.no_grad():\n",
    "        for features, labels in support_loader:  # support_loader loads the support set\n",
    "            \n",
    "            features = features.to(device)\n",
    "            optimizer.zero_grad()\n",
    "            #dim_features, _ = dim_model(features)\n",
    "        \n",
    "            embeddings = proto_net(features)\n",
    "            support_embeddings.append(embeddings.cpu().numpy())\n",
    "            support_labels.append(labels.cpu().numpy())\n",
    "        return np.concatenate(support_embeddings, axis=0), np.concatenate(support_labels, axis=0)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3ae81f6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "dataset = ImageFolder(root='Axial', transform=transform)\n",
    "data_loader = DataLoader(dataset, batch_size=32, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c679efe9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8205fc35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from torch.utils.data import DataLoader\n",
    "# assuming `your_dataset` is an instance of a class that extends torch.utils.data.Dataset\n",
    "\n",
    "# Create your DataLoader\n",
    "dataloader = DataLoader(dataset, batch_size=1, shuffle=True)\n",
    "\n",
    "# Calculate the number of instances in each class\n",
    "class_counts = {}\n",
    "for _, label in dataloader:\n",
    "    label = label.item()\n",
    "    if label in class_counts:\n",
    "        class_counts[label] += 1\n",
    "    else:\n",
    "        class_counts[label] = 1\n",
    "\n",
    "# Sort the counts for better visualization\n",
    "sorted_counts = dict(sorted(class_counts.items()))\n",
    "\n",
    "# Create a bar plot\n",
    "plt.bar(sorted_counts.keys(), sorted_counts.values())\n",
    "plt.xlabel('Class')\n",
    "plt.ylabel('Number of instances')\n",
    "plt.title('Distribution of instances per class')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f8b7db48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import ListedColormap\n",
    "\n",
    "# Create a color map with matplotlib colors\n",
    "cmap = ListedColormap(plt.cm.tab20.colors)  # 'tab20' is a colormap with 20 distinct colors\n",
    "class_names=['AD', 'CI', 'CN']\n",
    "class_names\n",
    "# Create a bar plot with colors\n",
    "plt.figure(figsize=(7, 5))  # Make the figure larger\n",
    "bars = plt.bar(sorted_counts.keys(), sorted_counts.values(), color=cmap.colors, edgecolor='black')\n",
    "\n",
    "# Add labels and title with a larger font\n",
    "plt.xlabel('Class', fontsize=14)\n",
    "plt.ylabel('Number of instances', fontsize=14)\n",
    "plt.title('Distribution of instances per class', fontsize=16)\n",
    "# Set the x-ticks to match the class names\n",
    "plt.xticks(range(len(sorted_counts)), class_names)#, rotation=45)  # Add rotation for better label readability if needed\n",
    "\n",
    "# Add grid\n",
    "plt.grid(True, which='both', linestyle='--', linewidth=0.5)\n",
    "\n",
    "# Add text labels above the bars\n",
    "for bar in bars:\n",
    "    yval = bar.get_height()\n",
    "    plt.text(bar.get_x() + bar.get_width()/2, yval + 1, round(yval, 1), ha='center', va='bottom', fontsize=12)\n",
    "# Save the plot\n",
    "plt.savefig('kaggle_distribution.png')\n",
    "# Show the plot\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "04819a4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "encoded_features = []\n",
    "true_labels = []  # Assuming you have some labels\n",
    "\n",
    "with torch.no_grad():\n",
    "    for images, labels in data_loader:  # DataLoader for your labeled subset\n",
    "        images = images.to(device)\n",
    "        \n",
    "        encoded_features.extend(images.cpu().numpy())\n",
    "        true_labels.extend(labels.numpy())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "debc63f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_classes = 3\n",
    "X_train, X_test, y_train, y_test = train_test_split(encoded_features, true_labels, test_size=0.6, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c6e4ebd1-516a-4655-af46-18561fa413c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "# Assuming X_train, X_test, y_train, y_test are your data\n",
    "data = {\n",
    "    'X_train': X_train,\n",
    "    'X_test': X_test,\n",
    "    'y_train': y_train,\n",
    "    'y_test': y_test\n",
    "}\n",
    "\n",
    "with open('train_test_data.pkl', 'wb') as file:\n",
    "    pickle.dump(data, file)\n",
    " \n",
    "#with open('train_test_data.pkl', 'rb') as file:\n",
    "#    data = pickle.load(file)\n",
    "\n",
    "#X_train = data['X_train']\n",
    "#X_test = data['X_test']\n",
    "#y_train = data['y_train']\n",
    "#y_test = data['y_test']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "11be9341",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming 'data' and 'labels' are your datasets\n",
    "train_dataset = FewShotDataset(X_train, y_train)\n",
    "test_dataset = FewShotDataset(X_test, y_test)\n",
    "\n",
    "train_sampler = PrototypicalBatchSampler(y_train, classes_per_batch=3, support_per_class=10, queries_per_class=5)\n",
    "test_sampler = PrototypicalBatchSampler(y_test, classes_per_batch=3, support_per_class=10, queries_per_class=5)\n",
    "\n",
    "#train_sampler = PrototypicalBatchSampler(X_train, y_train, classes_per_batch=4, support_per_class=10, queries_per_class=5)\n",
    "#test_sampler = PrototypicalBatchSampler(X_test, y_test, classes_per_batch=4, support_per_class=10, queries_per_class=5)\n",
    "\n",
    "train_loader = DataLoader(train_dataset, batch_sampler=train_sampler)\n",
    "test_loader = DataLoader(test_dataset, batch_sampler=test_sampler)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "67f32a5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adjust the input_size to match the size of your extracted features\n",
    "input_size =  224 * 224 * 3 #input_size = 64  # Replace with the actual size of your features\n",
    "hidden_size = 128 #26  # 256 This can be adjusted as per your model's requirement\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "eff16c91",
   "metadata": {},
   "outputs": [],
   "source": [
    "proto_net = ResnetPrototypicalNetwork(input_size, hidden_size).to(device)\n",
    "# Prototypical Loss\n",
    "n_support = 10  # Adjust as needed\n",
    "proto_loss_fn = PrototypicalLoss(n_support).to(device)\n",
    "optimizer = torch.optim.Adam(proto_net.parameters(), lr=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b59db352",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "aa093adc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Average Loss: 0.9728, Average Accuracy: 0.6311\n",
      "Epoch 1, Average Loss: 0.4386, Average Accuracy: 0.8341\n",
      "Epoch 2, Average Loss: 0.2714, Average Accuracy: 0.9081\n",
      "Epoch 3, Average Loss: 0.1235, Average Accuracy: 0.9630\n",
      "Epoch 4, Average Loss: 0.1706, Average Accuracy: 0.9467\n",
      "Epoch 5, Average Loss: 0.1708, Average Accuracy: 0.9481\n",
      "Epoch 6, Average Loss: 0.1450, Average Accuracy: 0.9467\n",
      "Epoch 7, Average Loss: 0.0746, Average Accuracy: 0.9733\n",
      "Epoch 8, Average Loss: 0.0634, Average Accuracy: 0.9748\n",
      "Epoch 9, Average Loss: 0.0821, Average Accuracy: 0.9659\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[22], line 20\u001b[0m\n\u001b[1;32m     17\u001b[0m output \u001b[38;5;241m=\u001b[39m proto_net(features)\n\u001b[1;32m     18\u001b[0m loss, acc \u001b[38;5;241m=\u001b[39m proto_loss_fn(output, labels)\n\u001b[0;32m---> 20\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[1;32m     21\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n\u001b[1;32m     23\u001b[0m \u001b[38;5;66;03m# Accumulate loss and accuracy\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/_tensor.py:525\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    515\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    517\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    518\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    523\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs,\n\u001b[1;32m    524\u001b[0m     )\n\u001b[0;32m--> 525\u001b[0m torch\u001b[38;5;241m.\u001b[39mautograd\u001b[38;5;241m.\u001b[39mbackward(\n\u001b[1;32m    526\u001b[0m     \u001b[38;5;28mself\u001b[39m, gradient, retain_graph, create_graph, inputs\u001b[38;5;241m=\u001b[39minputs\n\u001b[1;32m    527\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/__init__.py:267\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    262\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[1;32m    264\u001b[0m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[1;32m    265\u001b[0m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    266\u001b[0m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 267\u001b[0m _engine_run_backward(\n\u001b[1;32m    268\u001b[0m     tensors,\n\u001b[1;32m    269\u001b[0m     grad_tensors_,\n\u001b[1;32m    270\u001b[0m     retain_graph,\n\u001b[1;32m    271\u001b[0m     create_graph,\n\u001b[1;32m    272\u001b[0m     inputs,\n\u001b[1;32m    273\u001b[0m     allow_unreachable\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    274\u001b[0m     accumulate_grad\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    275\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/graph.py:744\u001b[0m, in \u001b[0;36m_engine_run_backward\u001b[0;34m(t_outputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    742\u001b[0m     unregister_hooks \u001b[38;5;241m=\u001b[39m _register_logging_hooks_on_whole_graph(t_outputs)\n\u001b[1;32m    743\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 744\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m Variable\u001b[38;5;241m.\u001b[39m_execution_engine\u001b[38;5;241m.\u001b[39mrun_backward(  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    745\u001b[0m         t_outputs, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[1;32m    746\u001b[0m     )  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    747\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    748\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m attach_logging_hooks:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "epoch_losses = []\n",
    "epoch_accuracies = []\n",
    "avg_losses_for_plot = []  # To store average losses for plotting\n",
    "avg_accuracies_for_plot = []  # To store average accuracies for plotting\n",
    "\n",
    "# Training loop  hidden_size = 26 \n",
    "for epoch in range(30):\n",
    "    total_loss = 0.0\n",
    "    total_accuracy = 0.0\n",
    "    total_batches = 0\n",
    "\n",
    "    for features, labels in train_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        output = proto_net(features)\n",
    "        loss, acc = proto_loss_fn(output, labels)\n",
    "\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate loss and accuracy\n",
    "        total_loss += loss.item()\n",
    "        total_accuracy += acc.item()\n",
    "        total_batches += 1\n",
    "\n",
    "    # Calculate average loss and accuracy for the epoch\n",
    "    avg_loss = total_loss / total_batches\n",
    "    avg_accuracy = total_accuracy / total_batches\n",
    "    \n",
    "    # Store metrics\n",
    "    epoch_losses.append(avg_loss)\n",
    "    epoch_accuracies.append(avg_accuracy)\n",
    "    \n",
    "    # Store metrics for plotting\n",
    "    avg_losses_for_plot.append(avg_loss)\n",
    "    avg_accuracies_for_plot.append(avg_accuracy)\n",
    "    \n",
    "    # Log the training progress\n",
    "    print(f'Epoch {epoch}, Average Loss: {avg_loss:.4f}, Average Accuracy: {avg_accuracy:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "877690c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9369281045751634\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9603    0.9245    0.9421      1020\n",
      "           1     0.9072    0.9490    0.9276      1020\n",
      "           2     0.9456    0.9373    0.9414      1020\n",
      "\n",
      "    accuracy                         0.9369      3060\n",
      "   macro avg     0.9377    0.9369    0.9370      3060\n",
      "weighted avg     0.9377    0.9369    0.9370      3060\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "support_embeddings, support_labels = get_support_set_embeddings(test_loader, proto_net)\n",
    "# Convert to PyTorch tensors\n",
    "support_embeddings = torch.tensor(support_embeddings).to(device)\n",
    "support_labels = torch.tensor(support_labels).to(device)\n",
    "\n",
    "n_classes = 3\n",
    "# Compute the prototypes\n",
    "prototypes = compute_prototypes(support_embeddings, support_labels, n_classes)\n",
    "# In your evaluation loop\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        query_embeddings = proto_net(features)\n",
    "        predicted_labels = classify_embeddings(query_embeddings, prototypes)\n",
    "proto_net.eval()  # Assuming 'proto_net' is your Prototypical Network model\n",
    "\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "all_preds = []\n",
    "all_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:  # Replace eval_loader with your DataLoader for evaluation\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        embeddings = proto_net(features)\n",
    "        preds, soft_assignments = classify_embeddings(embeddings,prototypes)\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(all_labels, all_preds)\n",
    "print(f'Accuracy: {accuracy}')\n",
    "print(classification_report(all_labels, all_preds, digits=4))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "dc6a6fdc-f069-4345-8099-620f15bff8fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.manifold import TSNE\n",
    "import numpy as np\n",
    "# Assuming proto_net is your Prototypical Network\n",
    "proto_net.eval()  # Set the model to evaluation mode\n",
    "class_names = ['AD', 'CI', 'CN']\n",
    "\n",
    "embeddings = []\n",
    "labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, batch_labels in test_loader:  # data_loader is your DataLoader\n",
    "        features = features.to(device)\n",
    "        #dim_features, _ = dim_model(features) \n",
    "        batch_embeddings = proto_net(features)  # Get the embeddings\n",
    "        embeddings.append(batch_embeddings.cpu().numpy())\n",
    "        labels.append(batch_labels.cpu().numpy())\n",
    "\n",
    "# Convert lists to numpy arrays\n",
    "embeddings = np.concatenate(embeddings, axis=0)\n",
    "labels = np.concatenate(labels, axis=0)\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(embeddings, labels, test_size=0.1, random_state=42)\n",
    " \n",
    " # Apply t-SNE transformation\n",
    "tsne = TSNE(n_components=2, random_state=0)\n",
    "embeddings_2d = tsne.fit_transform(X_test)\n",
    "\n",
    "import seaborn as sns\n",
    "palette = sns.color_palette(['blue', 'red', 'green', 'orange'])\n",
    "# Define the marker styles if desired\n",
    "markers = ['o']\n",
    "# Plotting\n",
    "plt.figure(figsize=(5, 4))\n",
    "# Use seaborn to get a nicer plot\n",
    "# Scatter plot for each class using the color palette\n",
    "for i, color in zip(range(len(class_names)), palette):\n",
    "    indices = y_test == i\n",
    "    sns.scatterplot(x=embeddings_2d[indices , 0], y=embeddings_2d[indices , 1], \n",
    "                    label=f'{class_names[i]}', color=color, s=100, \n",
    "                    alpha=0.7, edgecolor='k', linewidth=0.5, marker=markers[i % len(markers)])\n",
    "\n",
    "# Improving the legend and placing it outside the plot\n",
    "#plt.legend(title='Classes', loc='center left', bbox_to_anchor=(1, 0.5), fontsize='large', title_fontsize='20')\n",
    "\n",
    "# Adding title and labels with larger font sizes\n",
    "plt.title('Embeddings of ProtoNet1 (ResNet18)', fontsize=14)\n",
    "plt.xlabel('t-SNE x', fontsize=9)\n",
    "plt.ylabel('t-SNE y', fontsize=9)\n",
    "\n",
    "# Adding grid with dashed lines\n",
    "plt.grid(True, linestyle='--')\n",
    "\n",
    "# Tight layout often provides a better subplot arrangement\n",
    "plt.tight_layout()\n",
    "plt.savefig('emb_resnet1.png', dpi=300)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d99d2b17",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model architecture and trained parameters\n",
    "torch.save(proto_net.state_dict(), \"ADNI_ResNet_protonet.pth\")\n",
    "# Load the trained parameters\n",
    "#model.load_state_dict(torch.load(\"trained_protonet.pth\"))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53af9fca",
   "metadata": {},
   "source": [
    "## MobileNetPrototypicalNetwork"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8468fd3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torchvision.models as models\n",
    "\n",
    "class MobileNetPrototypicalNetwork(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size):\n",
    "        super(MobileNetPrototypicalNetwork, self).__init__()\n",
    "        # Load a pre-trained MobileNet model\n",
    "        self.mobilenet = models.mobilenet_v2(pretrained=True)\n",
    "        \n",
    "        # Remove the classifier to use as a feature extractor\n",
    "        # For MobileNetV2, features before the classifier are stored in 'features'\n",
    "        self.features = self.mobilenet.features\n",
    "        \n",
    "        # MobileNetV2 outputs features of size 1280 for each image\n",
    "        # Adjust the input size of the linear layer accordingly\n",
    "        self.additional_layers = nn.Sequential(\n",
    "            nn.AdaptiveAvgPool2d((1, 1)),  # Global Average Pooling to reduce spatial dimensions\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(1280, 4)  # Adjust the number here to match MobileNetV2's output\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Extract features using the MobileNet backbone\n",
    "        x = self.features(x)\n",
    "        \n",
    "        # Pass through additional layers\n",
    "        embedding = self.additional_layers(x)\n",
    "        return embedding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "91aed9ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/safa/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/home/safa/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=MobileNet_V2_Weights.IMAGENET1K_V1`. You can also use `weights=MobileNet_V2_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Average Loss: 0.8486, Average Accuracy: 0.5926\n",
      "Epoch 1, Average Loss: 0.3980, Average Accuracy: 0.8519\n",
      "Epoch 2, Average Loss: 0.2535, Average Accuracy: 0.9111\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[27], line 34\u001b[0m\n\u001b[1;32m     30\u001b[0m output \u001b[38;5;241m=\u001b[39m MobileNet_proto_net(features)\n\u001b[1;32m     31\u001b[0m loss, acc \u001b[38;5;241m=\u001b[39m proto_loss_fn(output, labels)\n\u001b[0;32m---> 34\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[1;32m     35\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n\u001b[1;32m     37\u001b[0m \u001b[38;5;66;03m# Accumulate loss and accuracy\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/_tensor.py:525\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    515\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    517\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    518\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    523\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs,\n\u001b[1;32m    524\u001b[0m     )\n\u001b[0;32m--> 525\u001b[0m torch\u001b[38;5;241m.\u001b[39mautograd\u001b[38;5;241m.\u001b[39mbackward(\n\u001b[1;32m    526\u001b[0m     \u001b[38;5;28mself\u001b[39m, gradient, retain_graph, create_graph, inputs\u001b[38;5;241m=\u001b[39minputs\n\u001b[1;32m    527\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/__init__.py:267\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    262\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[1;32m    264\u001b[0m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[1;32m    265\u001b[0m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    266\u001b[0m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 267\u001b[0m _engine_run_backward(\n\u001b[1;32m    268\u001b[0m     tensors,\n\u001b[1;32m    269\u001b[0m     grad_tensors_,\n\u001b[1;32m    270\u001b[0m     retain_graph,\n\u001b[1;32m    271\u001b[0m     create_graph,\n\u001b[1;32m    272\u001b[0m     inputs,\n\u001b[1;32m    273\u001b[0m     allow_unreachable\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    274\u001b[0m     accumulate_grad\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    275\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/graph.py:744\u001b[0m, in \u001b[0;36m_engine_run_backward\u001b[0;34m(t_outputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    742\u001b[0m     unregister_hooks \u001b[38;5;241m=\u001b[39m _register_logging_hooks_on_whole_graph(t_outputs)\n\u001b[1;32m    743\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 744\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m Variable\u001b[38;5;241m.\u001b[39m_execution_engine\u001b[38;5;241m.\u001b[39mrun_backward(  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    745\u001b[0m         t_outputs, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[1;32m    746\u001b[0m     )  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    747\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    748\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m attach_logging_hooks:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "MobileNet_proto_net = MobileNetPrototypicalNetwork(input_size, hidden_size).to(device)\n",
    "# Prototypical Loss\n",
    "n_support = 10  # Adjust as needed\n",
    "proto_loss_fn = PrototypicalLoss(n_support).to(device)\n",
    "optimizer = torch.optim.Adam(MobileNet_proto_net.parameters(), lr=1e-4)\n",
    "epoch_losses = []\n",
    "epoch_accuracies = [] \n",
    "mobilenet_avg_losses_for_plot = []  # To store average losses for plotting\n",
    "mobilenet_avg_accuracies_for_plot = []  # To store average accuracies for plotting\n",
    "\n",
    "# Training loop  hidden_size = 26 \n",
    "for epoch in range(30):\n",
    "    total_loss = 0.0\n",
    "    total_accuracy = 0.0\n",
    "    total_batches = 0\n",
    "\n",
    "    for features, labels in train_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "\n",
    "        #optimizer.zero_grad()\n",
    "        #output = proto_net(features)\n",
    "        #loss, acc, predictions, true_labels = proto_loss_fn(output, labels)\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        # Extract features from the pre-trained DIM model\n",
    "        #with torch.no_grad():\n",
    "        #/    dim_features, _ = dim_model(features)\n",
    "\n",
    "        # Now, use dim_features as the input to your ProtoNet model\n",
    "        output = MobileNet_proto_net(features)\n",
    "        loss, acc = proto_loss_fn(output, labels)\n",
    "\n",
    "\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate loss and accuracy\n",
    "        total_loss += loss.item()\n",
    "        total_accuracy += acc.item()\n",
    "        total_batches += 1\n",
    "\n",
    "    # Calculate average loss and accuracy for the epoch\n",
    "    avg_loss = total_loss / total_batches\n",
    "    avg_accuracy = total_accuracy / total_batches\n",
    "    \n",
    "    # Store metrics\n",
    "    epoch_losses.append(avg_loss)\n",
    "    epoch_accuracies.append(avg_accuracy)\n",
    "    \n",
    "    mobilenet_avg_losses_for_plot.append(avg_loss)\n",
    "    mobilenet_avg_accuracies_for_plot.append(avg_accuracy)\n",
    "    \n",
    "    # Log the training progress\n",
    "    print(f'Epoch {epoch}, Average Loss: {avg_loss:.4f}, Average Accuracy: {avg_accuracy:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "80e07266",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9016339869281046\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9118    0.8922    0.9019      1020\n",
      "           1     0.9147    0.8833    0.8988      1020\n",
      "           2     0.8802    0.9294    0.9041      1020\n",
      "\n",
      "    accuracy                         0.9016      3060\n",
      "   macro avg     0.9023    0.9016    0.9016      3060\n",
      "weighted avg     0.9023    0.9016    0.9016      3060\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "support_embeddings, support_labels = get_support_set_embeddings(test_loader, MobileNet_proto_net)\n",
    "# Convert to PyTorch tensors\n",
    "support_embeddings = torch.tensor(support_embeddings).to(device)\n",
    "support_labels = torch.tensor(support_labels).to(device)\n",
    "\n",
    "n_classes = 3\n",
    "# Compute the prototypes\n",
    "prototypes = compute_prototypes(support_embeddings, support_labels, n_classes)\n",
    "# In your evaluation loop\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        query_embeddings = MobileNet_proto_net(features)\n",
    "        predicted_labels = classify_embeddings(query_embeddings, prototypes)\n",
    "MobileNet_proto_net.eval()  # Assuming 'proto_net' is your Prototypical Network model\n",
    "\n",
    "all_preds = []\n",
    "all_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:  # Replace eval_loader with your DataLoader for evaluation\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        embeddings = MobileNet_proto_net(features)\n",
    "        preds, soft_assignments = classify_embeddings(embeddings,prototypes)\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(all_labels, all_preds)\n",
    "print(f'Accuracy: {accuracy}')\n",
    "print(classification_report(all_labels, all_preds, digits=4))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5608e5a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model architecture and trained parameters\n",
    "torch.save(MobileNet_proto_net.state_dict(), \"MobileNet_protonet.pth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "6486bd98-ddbe-4d05-81cb-e1d914c884ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.manifold import TSNE\n",
    "import numpy as np\n",
    "# Assuming proto_net is your Prototypical Network\n",
    "MobileNet_proto_net.eval()  # Set the model to evaluation mode\n",
    "class_names = ['AD', 'CI', 'CN']\n",
    "\n",
    "embeddings = []\n",
    "labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, batch_labels in test_loader:  # data_loader is your DataLoader\n",
    "        features = features.to(device)\n",
    "        #dim_features, _ = dim_model(features) \n",
    "        batch_embeddings = MobileNet_proto_net(features)  # Get the embeddings\n",
    "        embeddings.append(batch_embeddings.cpu().numpy())\n",
    "        labels.append(batch_labels.cpu().numpy())\n",
    "\n",
    "# Convert lists to numpy arrays\n",
    "embeddings = np.concatenate(embeddings, axis=0)\n",
    "labels = np.concatenate(labels, axis=0)\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(embeddings, labels, test_size=0.1, random_state=42)\n",
    "\n",
    " # Apply t-SNE transformation\n",
    "tsne = TSNE(n_components=2, random_state=0)\n",
    "embeddings_2d = tsne.fit_transform(X_test)\n",
    "\n",
    "import seaborn as sns\n",
    "palette = sns.color_palette(['blue', 'red', 'green', 'orange'])\n",
    "# Define the marker styles if desired\n",
    "markers = ['o']\n",
    "# Plotting\n",
    "plt.figure(figsize=(5, 4))\n",
    "# Use seaborn to get a nicer plot\n",
    "# Scatter plot for each class using the color palette\n",
    "for i, color in zip(range(len(class_names)), palette):\n",
    "    indices = y_test == i\n",
    "    sns.scatterplot(x=embeddings_2d[indices , 0], y=embeddings_2d[indices , 1], \n",
    "                    label=f'{class_names[i]}', color=color, s=100, \n",
    "                    alpha=0.7, edgecolor='k', linewidth=0.5, marker=markers[i % len(markers)])\n",
    "\n",
    "# Improving the legend and placing it outside the plot\n",
    "#plt.legend(title='Classes', loc='center left', bbox_to_anchor=(1, 0.5), fontsize='large', title_fontsize='20')\n",
    "\n",
    "# Adding title and labels with larger font sizes\n",
    "plt.title('Embeddings using ProtoNet3 (MobileNet)', fontsize=14)\n",
    "plt.xlabel('t-SNE x', fontsize=9)\n",
    "plt.ylabel('t-SNE y', fontsize=9)\n",
    "\n",
    "# Adding grid with dashed lines\n",
    "plt.grid(True, linestyle='--')\n",
    "\n",
    "# Tight layout often provides a better subplot arrangement\n",
    "plt.tight_layout()\n",
    "plt.savefig('emb_mobilenet.png', dpi=300)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7dc81a72",
   "metadata": {},
   "source": [
    "## VGGPrototypicalNetwork"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "bfad2109",
   "metadata": {},
   "outputs": [],
   "source": [
    "class VGGPrototypicalNetwork(nn.Module):\n",
    "    def __init__(self, hidden_size):\n",
    "        super(VGGPrototypicalNetwork, self).__init__()\n",
    "        # Load a pre-trained VGG model\n",
    "        self.vgg = models.vgg16(pretrained=True)\n",
    "        \n",
    "        # Use VGG as a feature extractor\n",
    "        self.features = self.vgg.features\n",
    "        self.avgpool = self.vgg.avgpool\n",
    "\n",
    "        # Flatten the output and pass it through additional layers for feature embedding\n",
    "        self.embedding = nn.Sequential(\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(512 * 7 * 7, hidden_size),  # Embedding layer\n",
    "            nn.ReLU(True)\n",
    "            # Removed the final classification layer to focus on embeddings\n",
    "        )\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Extract features using the VGG backbone\n",
    "        x = self.features(x)\n",
    "        x = self.avgpool(x)\n",
    "\n",
    "        # Generate embeddings suitable for prototypical network\n",
    "        embedding = self.embedding(x)\n",
    "        return embedding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "8f40e00a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/safa/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/home/safa/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Average Loss: 0.9652, Average Accuracy: 0.5615\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[31], line 36\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[38;5;66;03m#print(output.shape)\u001b[39;00m\n\u001b[1;32m     33\u001b[0m loss, acc \u001b[38;5;241m=\u001b[39m proto_loss_fn(output, labels)\n\u001b[0;32m---> 36\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[1;32m     37\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n\u001b[1;32m     39\u001b[0m \u001b[38;5;66;03m# Accumulate loss and accuracy\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/_tensor.py:525\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    515\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    517\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    518\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    523\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs,\n\u001b[1;32m    524\u001b[0m     )\n\u001b[0;32m--> 525\u001b[0m torch\u001b[38;5;241m.\u001b[39mautograd\u001b[38;5;241m.\u001b[39mbackward(\n\u001b[1;32m    526\u001b[0m     \u001b[38;5;28mself\u001b[39m, gradient, retain_graph, create_graph, inputs\u001b[38;5;241m=\u001b[39minputs\n\u001b[1;32m    527\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/__init__.py:267\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    262\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[1;32m    264\u001b[0m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[1;32m    265\u001b[0m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    266\u001b[0m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 267\u001b[0m _engine_run_backward(\n\u001b[1;32m    268\u001b[0m     tensors,\n\u001b[1;32m    269\u001b[0m     grad_tensors_,\n\u001b[1;32m    270\u001b[0m     retain_graph,\n\u001b[1;32m    271\u001b[0m     create_graph,\n\u001b[1;32m    272\u001b[0m     inputs,\n\u001b[1;32m    273\u001b[0m     allow_unreachable\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    274\u001b[0m     accumulate_grad\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    275\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/graph.py:744\u001b[0m, in \u001b[0;36m_engine_run_backward\u001b[0;34m(t_outputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    742\u001b[0m     unregister_hooks \u001b[38;5;241m=\u001b[39m _register_logging_hooks_on_whole_graph(t_outputs)\n\u001b[1;32m    743\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 744\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m Variable\u001b[38;5;241m.\u001b[39m_execution_engine\u001b[38;5;241m.\u001b[39mrun_backward(  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    745\u001b[0m         t_outputs, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[1;32m    746\u001b[0m     )  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    747\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    748\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m attach_logging_hooks:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "proto_net = VGGPrototypicalNetwork(128).to(device)\n",
    "# Prototypical Loss\n",
    "n_support = 10  # Adjust as needed\n",
    "proto_loss_fn = PrototypicalLoss(n_support).to(device)\n",
    "optimizer = torch.optim.Adam(proto_net.parameters(), lr=1e-4)\n",
    "epoch_losses = []\n",
    "epoch_accuracies = [] \n",
    "vgg_avg_losses_for_plot = []\n",
    "vgg_avg_accuracies_for_plot = []\n",
    "\n",
    "\n",
    "# Training loop  hidden_size = 26 \n",
    "for epoch in range(30):\n",
    "    total_loss = 0.0\n",
    "    total_accuracy = 0.0\n",
    "    total_batches = 0\n",
    "\n",
    "    for features, labels in train_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "\n",
    "        #optimizer.zero_grad()\n",
    "        #output = proto_net(features)\n",
    "        #loss, acc, predictions, true_labels = proto_loss_fn(output, labels)\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        # Extract features from the pre-trained DIM model\n",
    "        #with torch.no_grad():\n",
    "        #/    dim_features, _ = dim_model(features)\n",
    "\n",
    "        # Now, use dim_features as the input to your ProtoNet model\n",
    "        output = proto_net(features)\n",
    "        #print(output.shape)\n",
    "        loss, acc = proto_loss_fn(output, labels)\n",
    "\n",
    "\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate loss and accuracy\n",
    "        total_loss += loss.item()\n",
    "        total_accuracy += acc.item()\n",
    "        total_batches += 1\n",
    "\n",
    "    # Calculate average loss and accuracy for the epoch\n",
    "    avg_loss = total_loss / total_batches\n",
    "    avg_accuracy = total_accuracy / total_batches\n",
    "    \n",
    "    # Store metrics\n",
    "    epoch_losses.append(avg_loss)\n",
    "    epoch_accuracies.append(avg_accuracy)\n",
    "    vgg_avg_losses_for_plot.append(avg_loss)\n",
    "    vgg_avg_accuracies_for_plot.append(avg_accuracy)\n",
    "    \n",
    "    # Log the training progress\n",
    "    print(f'Epoch {epoch}, Average Loss: {avg_loss:.4f}, Average Accuracy: {avg_accuracy:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "41edd3ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.734967320261438\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.7581    0.7990    0.7780      1020\n",
      "           1     0.7336    0.6157    0.6695      1020\n",
      "           2     0.7139    0.7902    0.7501      1020\n",
      "\n",
      "    accuracy                         0.7350      3060\n",
      "   macro avg     0.7352    0.7350    0.7326      3060\n",
      "weighted avg     0.7352    0.7350    0.7326      3060\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "support_embeddings, support_labels = get_support_set_embeddings(test_loader,proto_net)\n",
    "# Convert to PyTorch tensors\n",
    "support_embeddings = torch.tensor(support_embeddings).to(device)\n",
    "support_labels = torch.tensor(support_labels).to(device)\n",
    "\n",
    "n_classes = 3\n",
    "# Compute the prototypes\n",
    "prototypes = compute_prototypes(support_embeddings, support_labels, n_classes)\n",
    "# In your evaluation loop\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        query_embeddings = proto_net(features)\n",
    "        predicted_labels = classify_embeddings(query_embeddings, prototypes)\n",
    "proto_net.eval()  # Assuming 'proto_net' is your Prototypical Network model\n",
    "\n",
    "all_preds = []\n",
    "all_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:  # Replace eval_loader with your DataLoader for evaluation\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        embeddings = proto_net(features)\n",
    "        preds, soft_assignments = classify_embeddings(embeddings,prototypes)\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(all_labels, all_preds)\n",
    "print(f'Accuracy: {accuracy}')\n",
    "print(classification_report(all_labels, all_preds, digits=4))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "e9bac7e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model architecture and trained parameters\n",
    "torch.save(proto_net.state_dict(), \"VGG_protonet.pth\")\n",
    "# Load the trained parameters\n",
    "#model.load_state_dict(torch.load(\"trained_protonet.pth\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "3061bb3a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#model = VGGPrototypicalNetwork(128,4).to(device)\n",
    "\n",
    "#model.load_state_dict(torch.load(\"VGG_protonet.pth\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e31d1903-66f4-495e-b761-dc84abf38d48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 500x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.manifold import TSNE\n",
    "import numpy as np\n",
    "# Assuming proto_net is your Prototypical Network\n",
    "proto_net.eval()  # Set the model to evaluation mode\n",
    "class_names = ['AD', 'CI', 'CN']\n",
    "\n",
    "embeddings = []\n",
    "labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, batch_labels in test_loader:  # data_loader is your DataLoader\n",
    "        features = features.to(device)\n",
    "        #dim_features, _ = dim_model(features) \n",
    "        batch_embeddings = proto_net(features)  # Get the embeddings\n",
    "        embeddings.append(batch_embeddings.cpu().numpy())\n",
    "        labels.append(batch_labels.cpu().numpy())\n",
    "\n",
    "# Convert lists to numpy arrays\n",
    "embeddings = np.concatenate(embeddings, axis=0)\n",
    "labels = np.concatenate(labels, axis=0)\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(embeddings, labels, test_size=0.1, random_state=42)\n",
    "\n",
    " # Apply t-SNE transformation\n",
    "tsne = TSNE(n_components=2, random_state=0)\n",
    "embeddings_2d = tsne.fit_transform(X_test)\n",
    "\n",
    "import seaborn as sns\n",
    "palette = sns.color_palette(['blue', 'red', 'green', 'orange'])\n",
    "# Define the marker styles if desired\n",
    "markers = ['o']\n",
    "# Plotting\n",
    "plt.figure(figsize=(5, 4))\n",
    "# Use seaborn to get a nicer plot\n",
    "# Scatter plot for each class using the color palette\n",
    "for i, color in zip(range(len(class_names)), palette):\n",
    "    indices = y_test == i\n",
    "    sns.scatterplot(x=embeddings_2d[indices , 0], y=embeddings_2d[indices , 1], \n",
    "                    label=f'{class_names[i]}', color=color, s=100, \n",
    "                    alpha=0.7, edgecolor='k', linewidth=0.5, marker=markers[i % len(markers)])\n",
    "\n",
    "# Improving the legend and placing it outside the plot\n",
    "#plt.legend(title='Classes', loc='center left', bbox_to_anchor=(1, 0.5), fontsize='large', title_fontsize='20')\n",
    "\n",
    "# Adding title and labels with larger font sizes\n",
    "plt.title('Embeddings of ProtoNet5 (VGG16)', fontsize=14)\n",
    "plt.xlabel('t-SNE x', fontsize=9)\n",
    "plt.ylabel('t-SNE y', fontsize=9)\n",
    "\n",
    "# Adding grid with dashed lines\n",
    "plt.grid(True, linestyle='--')\n",
    "\n",
    "# Tight layout often provides a better subplot arrangement\n",
    "plt.tight_layout()\n",
    "plt.savefig('emb_vgg.png', dpi=300)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30cf6f04",
   "metadata": {},
   "source": [
    "## EfficientNetPrototypicalNetwork"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "1408420d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "from efficientnet_pytorch import EfficientNet\n",
    "import torchvision.models as models\n",
    "\n",
    "class EfficientNetPrototypicalNetwork(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size, efficientnet_version='b0', weights_path=None):\n",
    "        super(EfficientNetPrototypicalNetwork, self).__init__()\n",
    "        # Load a pre-trained EfficientNet model\n",
    "        self.efficientnet = EfficientNet.from_pretrained(f'efficientnet-{efficientnet_version}', weights_path=weights_path)\n",
    "        \n",
    "        # Remove the classifier to use as a feature extractor\n",
    "        # For EfficientNet, features before the classifier are stored in 'extract_features'\n",
    "        self.features = self.efficientnet.extract_features\n",
    "        \n",
    "        # EfficientNet outputs features of variable size depending on the architecture\n",
    "        # Adjust the input size of the linear layer accordingly\n",
    "        self.additional_layers = nn.Sequential(\n",
    "            nn.AdaptiveAvgPool2d((1, 1)),  # Global Average Pooling to reduce spatial dimensions\n",
    "            nn.Flatten()\n",
    "        )\n",
    "        # The output size of EfficientNet varies depending on its architecture\n",
    "        # You may need to manually specify the input size for the linear layer\n",
    "        self.linear = nn.Linear(self.efficientnet._fc.in_features, hidden_size)\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Extract features using the EfficientNet backbone\n",
    "        x = self.features(x)\n",
    "        \n",
    "        # Pass through additional layers\n",
    "        x = self.additional_layers(x)\n",
    "        \n",
    "        # Linear layer to obtain the final embedding\n",
    "        embedding = self.linear(x)\n",
    "        return embedding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "019db32c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded pretrained weights for efficientnet-b0\n",
      "Epoch 0, Average Loss: 0.6035, Average Accuracy: 0.7659\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[35], line 23\u001b[0m\n\u001b[1;32m     21\u001b[0m output \u001b[38;5;241m=\u001b[39m proto_net(features)\n\u001b[1;32m     22\u001b[0m loss, acc \u001b[38;5;241m=\u001b[39m proto_loss_fn(output, labels)\n\u001b[0;32m---> 23\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n\u001b[1;32m     24\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n\u001b[1;32m     26\u001b[0m \u001b[38;5;66;03m# Accumulate loss and accuracy\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/_tensor.py:525\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    515\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    517\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    518\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    523\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs,\n\u001b[1;32m    524\u001b[0m     )\n\u001b[0;32m--> 525\u001b[0m torch\u001b[38;5;241m.\u001b[39mautograd\u001b[38;5;241m.\u001b[39mbackward(\n\u001b[1;32m    526\u001b[0m     \u001b[38;5;28mself\u001b[39m, gradient, retain_graph, create_graph, inputs\u001b[38;5;241m=\u001b[39minputs\n\u001b[1;32m    527\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/__init__.py:267\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    262\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[1;32m    264\u001b[0m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[1;32m    265\u001b[0m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    266\u001b[0m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 267\u001b[0m _engine_run_backward(\n\u001b[1;32m    268\u001b[0m     tensors,\n\u001b[1;32m    269\u001b[0m     grad_tensors_,\n\u001b[1;32m    270\u001b[0m     retain_graph,\n\u001b[1;32m    271\u001b[0m     create_graph,\n\u001b[1;32m    272\u001b[0m     inputs,\n\u001b[1;32m    273\u001b[0m     allow_unreachable\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    274\u001b[0m     accumulate_grad\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m,\n\u001b[1;32m    275\u001b[0m )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/autograd/graph.py:744\u001b[0m, in \u001b[0;36m_engine_run_backward\u001b[0;34m(t_outputs, *args, **kwargs)\u001b[0m\n\u001b[1;32m    742\u001b[0m     unregister_hooks \u001b[38;5;241m=\u001b[39m _register_logging_hooks_on_whole_graph(t_outputs)\n\u001b[1;32m    743\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 744\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m Variable\u001b[38;5;241m.\u001b[39m_execution_engine\u001b[38;5;241m.\u001b[39mrun_backward(  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    745\u001b[0m         t_outputs, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs\n\u001b[1;32m    746\u001b[0m     )  \u001b[38;5;66;03m# Calls into the C++ engine to run the backward pass\u001b[39;00m\n\u001b[1;32m    747\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m    748\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m attach_logging_hooks:\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "eff_avg_losses_for_plotproto_net = EfficientNetPrototypicalNetwork(128,4).to(device)\n",
    "# Prototypical Loss\n",
    "n_support = 10  # Adjust as needed\n",
    "proto_loss_fn = PrototypicalLoss(n_support).to(device)\n",
    "optimizer = torch.optim.Adam(proto_net.parameters(), lr=1e-4)\n",
    "epoch_losses = []\n",
    "epoch_accuracies = [] \n",
    "eff_avg_losses_for_plot = []\n",
    "eff_avg_accuracies_for_plot = []\n",
    "\n",
    "\n",
    "# Training loop  hidden_size = 26 \n",
    "for epoch in range(30):\n",
    "    total_loss = 0.0\n",
    "    total_accuracy = 0.0\n",
    "    total_batches = 0\n",
    "\n",
    "    for features, labels in train_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        output = proto_net(features)\n",
    "        loss, acc = proto_loss_fn(output, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate loss and accuracy\n",
    "        total_loss += loss.item()\n",
    "        total_accuracy += acc.item()\n",
    "        total_batches += 1\n",
    "\n",
    "    # Calculate average loss and accuracy for the epoch\n",
    "    avg_loss = total_loss / total_batches\n",
    "    avg_accuracy = total_accuracy / total_batches\n",
    "    \n",
    "    # Store metrics\n",
    "    epoch_losses.append(avg_loss)\n",
    "    epoch_accuracies.append(avg_accuracy)\n",
    "    eff_avg_losses_for_plot.append(avg_loss)\n",
    "    eff_avg_accuracies_for_plot.append(avg_accuracy)\n",
    "\n",
    "    \n",
    "    # Log the training progress\n",
    "    print(f'Epoch {epoch}, Average Loss: {avg_loss:.4f}, Average Accuracy: {avg_accuracy:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "017b3875",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[36], line 25\u001b[0m\n\u001b[1;32m     23\u001b[0m features, labels \u001b[38;5;241m=\u001b[39m features\u001b[38;5;241m.\u001b[39mto(device), labels\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m     24\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[0;32m---> 25\u001b[0m embeddings \u001b[38;5;241m=\u001b[39m proto_net(features)\n\u001b[1;32m     26\u001b[0m preds, soft_assignments \u001b[38;5;241m=\u001b[39m classify_embeddings(embeddings,prototypes)\n\u001b[1;32m     27\u001b[0m all_preds\u001b[38;5;241m.\u001b[39mextend(preds\u001b[38;5;241m.\u001b[39mcpu()\u001b[38;5;241m.\u001b[39mnumpy())\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "Cell \u001b[0;32mIn[30], line 21\u001b[0m, in \u001b[0;36mVGGPrototypicalNetwork.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x):\n\u001b[1;32m     20\u001b[0m     \u001b[38;5;66;03m# Extract features using the VGG backbone\u001b[39;00m\n\u001b[0;32m---> 21\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeatures(x)\n\u001b[1;32m     22\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mavgpool(x)\n\u001b[1;32m     24\u001b[0m     \u001b[38;5;66;03m# Generate embeddings suitable for prototypical network\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/container.py:217\u001b[0m, in \u001b[0;36mSequential.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m):\n\u001b[1;32m    216\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m module \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m:\n\u001b[0;32m--> 217\u001b[0m         \u001b[38;5;28minput\u001b[39m \u001b[38;5;241m=\u001b[39m module(\u001b[38;5;28minput\u001b[39m)\n\u001b[1;32m    218\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28minput\u001b[39m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/conv.py:460\u001b[0m, in \u001b[0;36mConv2d.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    459\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m: Tensor) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[0;32m--> 460\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_conv_forward(\u001b[38;5;28minput\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mweight, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbias)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/conv.py:456\u001b[0m, in \u001b[0;36mConv2d._conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    452\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mzeros\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    453\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mconv2d(F\u001b[38;5;241m.\u001b[39mpad(\u001b[38;5;28minput\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reversed_padding_repeated_twice, mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode),\n\u001b[1;32m    454\u001b[0m                     weight, bias, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstride,\n\u001b[1;32m    455\u001b[0m                     _pair(\u001b[38;5;241m0\u001b[39m), \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdilation, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgroups)\n\u001b[0;32m--> 456\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mconv2d(\u001b[38;5;28minput\u001b[39m, weight, bias, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstride,\n\u001b[1;32m    457\u001b[0m                 \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdilation, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgroups)\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "support_embeddings, support_labels = get_support_set_embeddings(test_loader,proto_net)\n",
    "# Convert to PyTorch tensors\n",
    "support_embeddings = torch.tensor(support_embeddings).to(device)\n",
    "support_labels = torch.tensor(support_labels).to(device)\n",
    "\n",
    "n_classes = 3\n",
    "# Compute the prototypes\n",
    "prototypes = compute_prototypes(support_embeddings, support_labels, n_classes)\n",
    "# In your evaluation loop\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        query_embeddings = proto_net(features)\n",
    "        predicted_labels = classify_embeddings(query_embeddings, prototypes)\n",
    "proto_net.eval()  # Assuming 'proto_net' is your Prototypical Network model\n",
    "\n",
    "all_preds = []\n",
    "all_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:  # Replace eval_loader with your DataLoader for evaluation\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        embeddings = proto_net(features)\n",
    "        preds, soft_assignments = classify_embeddings(embeddings,prototypes)\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(all_labels, all_preds)\n",
    "print(f'Accuracy: {accuracy}')\n",
    "print(classification_report(all_labels, all_preds, digits=4))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "d390370e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model architecture and trained parameters\n",
    "torch.save(proto_net.state_dict(), \"ADNI-EfficientNet_protonet.pth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dc153f6-97a1-48d2-a82e-540ab96652e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.manifold import TSNE\n",
    "import numpy as np\n",
    "# Assuming proto_net is your Prototypical Network\n",
    "proto_net.eval()  # Set the model to evaluation mode\n",
    "class_names = ['AD', 'CI', 'CN']\n",
    "\n",
    "embeddings = []\n",
    "labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, batch_labels in test_loader:  # data_loader is your DataLoader\n",
    "        features = features.to(device)\n",
    "        #dim_features, _ = dim_model(features) \n",
    "        batch_embeddings = proto_net(features)  # Get the embeddings\n",
    "        embeddings.append(batch_embeddings.cpu().numpy())\n",
    "        labels.append(batch_labels.cpu().numpy())\n",
    "\n",
    "# Convert lists to numpy arrays\n",
    "embeddings = np.concatenate(embeddings, axis=0)\n",
    "labels = np.concatenate(labels, axis=0)\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(embeddings, labels, test_size=0.1, random_state=42)\n",
    "\n",
    " # Apply t-SNE transformation\n",
    "tsne = TSNE(n_components=2, random_state=0)\n",
    "embeddings_2d = tsne.fit_transform(X_test)\n",
    "\n",
    "import seaborn as sns\n",
    "palette = sns.color_palette(['blue', 'red', 'green', 'orange'])\n",
    "# Define the marker styles if desired\n",
    "markers = ['o']\n",
    "# Plotting\n",
    "plt.figure(figsize=(5, 4))\n",
    "# Use seaborn to get a nicer plot\n",
    "# Scatter plot for each class using the color palette\n",
    "for i, color in zip(range(len(class_names)), palette):\n",
    "    indices = y_test == i\n",
    "    sns.scatterplot(x=embeddings_2d[indices , 0], y=embeddings_2d[indices , 1], \n",
    "                    label=f'{class_names[i]}', color=color, s=100, \n",
    "                    alpha=0.7, edgecolor='k', linewidth=0.5, marker=markers[i % len(markers)])\n",
    "\n",
    "# Improving the legend and placing it outside the plot\n",
    "#plt.legend(title='Classes', loc='center left', bbox_to_anchor=(1, 0.5), fontsize='large', title_fontsize='20')\n",
    "\n",
    "# Adding title and labels with larger font sizes\n",
    "plt.title('Embeddings of ProtoNet4 (EfficientNet)', fontsize=14)\n",
    "plt.xlabel('t-SNE x', fontsize=9)\n",
    "plt.ylabel('t-SNE y', fontsize=9)\n",
    "\n",
    "# Adding grid with dashed lines\n",
    "plt.grid(True, linestyle='--')\n",
    "\n",
    "# Tight layout often provides a better subplot arrangement\n",
    "plt.tight_layout()\n",
    "plt.savefig('emb_eff.png', dpi=300)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1728076d",
   "metadata": {},
   "source": [
    "## ResNet34"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5bdd7472",
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "import torchvision.models as models\n",
    "\n",
    "class Resnet34PrototypicalNetwork(nn.Module):\n",
    "    def __init__(self, input_size, hidden_size):\n",
    "        super(Resnet34PrototypicalNetwork, self).__init__()\n",
    "        # Load a pre-trained ResNet model\n",
    "        self.resnet = models.resnet34(pretrained=True)\n",
    "        \n",
    "        # Remove the fully connected layer (classifier) to use as a feature extractor\n",
    "        self.features = nn.Sequential(*list(self.resnet.children())[:-1])\n",
    "        \n",
    "        # Flatten the output to [batch_size, 512] before passing to the linear layer\n",
    "        self.additional_layers = nn.Sequential(\n",
    "            nn.Flatten(),\n",
    "            nn.Linear(512, hidden_size)  # Adjust the number here to match ResNet's output\n",
    "        )\n",
    "        \n",
    "\n",
    "    def forward(self, x):\n",
    "        # Extract features using the ResNet backbone\n",
    "        x = self.features(x)\n",
    "        \n",
    "        # Pass through any additional layers\n",
    "        embedding = self.additional_layers(x)\n",
    "        return embedding\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ef95a889",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/safa/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "/home/safa/anaconda3/lib/python3.11/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n"
     ]
    }
   ],
   "source": [
    "# Adjust the input_size to match the size of your extracted features\n",
    "input_size =  224 * 224 * 3 #input_size = 64  # Replace with the actual size of your features\n",
    "hidden_size = 128 #26  # 256 This can be adjusted as per your model's requirement\n",
    "\n",
    "proto_net = Resnet34PrototypicalNetwork(input_size, hidden_size).to(device)\n",
    "# Prototypical Loss\n",
    "n_support = 10  # Adjust as needed\n",
    "proto_loss_fn = PrototypicalLoss(n_support).to(device)\n",
    "optimizer = torch.optim.Adam(proto_net.parameters(), lr=1e-4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "386ecef9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Average Loss: 1.2167, Average Accuracy: 0.5704\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[39], line 25\u001b[0m\n\u001b[1;32m     18\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[1;32m     20\u001b[0m \u001b[38;5;66;03m# Extract features from the pre-trained DIM model\u001b[39;00m\n\u001b[1;32m     21\u001b[0m \u001b[38;5;66;03m#with torch.no_grad():\u001b[39;00m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;66;03m#/    dim_features, _ = dim_model(features)\u001b[39;00m\n\u001b[1;32m     23\u001b[0m \n\u001b[1;32m     24\u001b[0m \u001b[38;5;66;03m# Now, use dim_features as the input to your ProtoNet model\u001b[39;00m\n\u001b[0;32m---> 25\u001b[0m output \u001b[38;5;241m=\u001b[39m proto_net(features)\n\u001b[1;32m     26\u001b[0m loss, acc \u001b[38;5;241m=\u001b[39m proto_loss_fn(output, labels)\n\u001b[1;32m     29\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "Cell \u001b[0;32mIn[37], line 22\u001b[0m, in \u001b[0;36mResnet34PrototypicalNetwork.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x):\n\u001b[1;32m     21\u001b[0m     \u001b[38;5;66;03m# Extract features using the ResNet backbone\u001b[39;00m\n\u001b[0;32m---> 22\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfeatures(x)\n\u001b[1;32m     24\u001b[0m     \u001b[38;5;66;03m# Pass through any additional layers\u001b[39;00m\n\u001b[1;32m     25\u001b[0m     embedding \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39madditional_layers(x)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/container.py:217\u001b[0m, in \u001b[0;36mSequential.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m):\n\u001b[1;32m    216\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m module \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m:\n\u001b[0;32m--> 217\u001b[0m         \u001b[38;5;28minput\u001b[39m \u001b[38;5;241m=\u001b[39m module(\u001b[38;5;28minput\u001b[39m)\n\u001b[1;32m    218\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28minput\u001b[39m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/container.py:217\u001b[0m, in \u001b[0;36mSequential.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m):\n\u001b[1;32m    216\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m module \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m:\n\u001b[0;32m--> 217\u001b[0m         \u001b[38;5;28minput\u001b[39m \u001b[38;5;241m=\u001b[39m module(\u001b[38;5;28minput\u001b[39m)\n\u001b[1;32m    218\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28minput\u001b[39m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torchvision/models/resnet.py:92\u001b[0m, in \u001b[0;36mBasicBlock.forward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     89\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x: Tensor) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m     90\u001b[0m     identity \u001b[38;5;241m=\u001b[39m x\n\u001b[0;32m---> 92\u001b[0m     out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconv1(x)\n\u001b[1;32m     93\u001b[0m     out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbn1(out)\n\u001b[1;32m     94\u001b[0m     out \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mrelu(out)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1532\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1531\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1532\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/module.py:1541\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1536\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1537\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1538\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1539\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1540\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m   1543\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1544\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/conv.py:460\u001b[0m, in \u001b[0;36mConv2d.forward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    459\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m: Tensor) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[0;32m--> 460\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_conv_forward(\u001b[38;5;28minput\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mweight, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbias)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/torch/nn/modules/conv.py:456\u001b[0m, in \u001b[0;36mConv2d._conv_forward\u001b[0;34m(self, input, weight, bias)\u001b[0m\n\u001b[1;32m    452\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mzeros\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m    453\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mconv2d(F\u001b[38;5;241m.\u001b[39mpad(\u001b[38;5;28minput\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reversed_padding_repeated_twice, mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode),\n\u001b[1;32m    454\u001b[0m                     weight, bias, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstride,\n\u001b[1;32m    455\u001b[0m                     _pair(\u001b[38;5;241m0\u001b[39m), \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdilation, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgroups)\n\u001b[0;32m--> 456\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mconv2d(\u001b[38;5;28minput\u001b[39m, weight, bias, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstride,\n\u001b[1;32m    457\u001b[0m                 \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdilation, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgroups)\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "\n",
    "epoch_losses = []\n",
    "epoch_accuracies = [] \n",
    "resnet34_avg_losses_for_plot = []\n",
    "resnet34_avg_accuracies_for_plot = []\n",
    "\n",
    "# Training loop  hidden_size = 26 \n",
    "for epoch in range(30):\n",
    "    total_loss = 0.0\n",
    "    total_accuracy = 0.0\n",
    "    total_batches = 0\n",
    "\n",
    "    for features, labels in train_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "\n",
    "        #optimizer.zero_grad()\n",
    "        #output = proto_net(features)\n",
    "        #loss, acc, predictions, true_labels = proto_loss_fn(output, labels)\n",
    "        optimizer.zero_grad()\n",
    "\n",
    "        # Extract features from the pre-trained DIM model\n",
    "        #with torch.no_grad():\n",
    "        #/    dim_features, _ = dim_model(features)\n",
    "\n",
    "        # Now, use dim_features as the input to your ProtoNet model\n",
    "        output = proto_net(features)\n",
    "        loss, acc = proto_loss_fn(output, labels)\n",
    "\n",
    "\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Accumulate loss and accuracy\n",
    "        total_loss += loss.item()\n",
    "        total_accuracy += acc.item()\n",
    "        total_batches += 1\n",
    "\n",
    "    # Calculate average loss and accuracy for the epoch\n",
    "    avg_loss = total_loss / total_batches\n",
    "    avg_accuracy = total_accuracy / total_batches\n",
    "    \n",
    "    # Store metrics\n",
    "    epoch_losses.append(avg_loss)\n",
    "    epoch_accuracies.append(avg_accuracy)\n",
    "    resnet34_avg_losses_for_plot.append(avg_loss)\n",
    "    resnet34_avg_accuracies_for_plot.append(avg_accuracy)\n",
    "    # Log the training progress\n",
    "    print(f'Epoch {epoch}, Average Loss: {avg_loss:.4f}, Average Accuracy: {avg_accuracy:.4f}')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7f4c4add-4bbd-4e49-bfab-22bc9013b2fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "support_embeddings, support_labels = get_support_set_embeddings(test_loader,proto_net)\n",
    "# Convert to PyTorch tensors\n",
    "support_embeddings = torch.tensor(support_embeddings).to(device)\n",
    "support_labels = torch.tensor(support_labels).to(device)\n",
    "\n",
    "n_classes = 3\n",
    "# Compute the prototypes\n",
    "prototypes = compute_prototypes(support_embeddings, support_labels, n_classes)\n",
    "# In your evaluation loop\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        query_embeddings = proto_net(features)\n",
    "        predicted_labels = classify_embeddings(query_embeddings, prototypes)\n",
    "proto_net.eval()  # Assuming 'proto_net' is your Prototypical Network model\n",
    "\n",
    "all_preds = []\n",
    "all_labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, labels in test_loader:  # Replace eval_loader with your DataLoader for evaluation\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        optimizer.zero_grad()\n",
    "        embeddings = proto_net(features)\n",
    "        preds, soft_assignments = classify_embeddings(embeddings,prototypes)\n",
    "        all_preds.extend(preds.cpu().numpy())\n",
    "        all_labels.extend(labels.cpu().numpy())\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(all_labels, all_preds)\n",
    "print(f'Accuracy: {accuracy}')\n",
    "print(classification_report(all_labels, all_preds, digits=4))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f8a50fbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save the model architecture and trained parameters\n",
    "torch.save(proto_net.state_dict(), \"ADNI-ResNet34_protonet.pth\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7bc3816a-d74c-4745-8209-c0af5b0fb0b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.manifold import TSNE\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.manifold import TSNE\n",
    "import numpy as np\n",
    "# Assuming proto_net is your Prototypical Network\n",
    "MobileNet_proto_net.eval()  # Set the model to evaluation mode\n",
    "class_names = ['AD', 'CI', 'CN']\n",
    "\n",
    "embeddings = []\n",
    "labels = []\n",
    "\n",
    "with torch.no_grad():\n",
    "    for features, batch_labels in test_loader:  # data_loader is your DataLoader\n",
    "        features = features.to(device)\n",
    "        #dim_features, _ = dim_model(features) \n",
    "        batch_embeddings = proto_net(features)  # Get the embeddings\n",
    "        embeddings.append(batch_embeddings.cpu().numpy())\n",
    "        labels.append(batch_labels.cpu().numpy())\n",
    "\n",
    "# Convert lists to numpy arrays\n",
    "embeddings = np.concatenate(embeddings, axis=0)\n",
    "labels = np.concatenate(labels, axis=0)\n",
    "\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(embeddings, labels, test_size=0.1, random_state=42)\n",
    "\n",
    " # Apply t-SNE transformation\n",
    "tsne = TSNE(n_components=2, random_state=0)\n",
    "embeddings_2d = tsne.fit_transform(X_test)\n",
    "\n",
    "import seaborn as sns\n",
    "palette = sns.color_palette(['blue', 'red', 'green', 'orange'])\n",
    "# Define the marker styles if desired\n",
    "markers = ['o']\n",
    "# Plotting\n",
    "plt.figure(figsize=(5, 4))\n",
    "# Use seaborn to get a nicer plot\n",
    "# Scatter plot for each class using the color palette\n",
    "for i, color in zip(range(len(class_names)), palette):\n",
    "    indices = y_test == i\n",
    "    sns.scatterplot(x=embeddings_2d[indices , 0], y=embeddings_2d[indices , 1], \n",
    "                    label=f'{class_names[i]}', color=color, s=100, \n",
    "                    alpha=0.7, edgecolor='k', linewidth=0.5, marker=markers[i % len(markers)])\n",
    "\n",
    "# Improving the legend and placing it outside the plot\n",
    "#plt.legend(title='Classes', loc='center left', bbox_to_anchor=(1, 0.5), fontsize='large', title_fontsize='20')\n",
    "\n",
    "# Adding title and labels with larger font sizes\n",
    "plt.title('Embeddings of ProtoNet2 (ResNet34)', fontsize=14)\n",
    "plt.xlabel('t-SNE x', fontsize=9)\n",
    "plt.ylabel('t-SNE y', fontsize=9)\n",
    "\n",
    "# Adding grid with dashed lines\n",
    "plt.grid(True, linestyle='--')\n",
    "\n",
    "# Tight layout often provides a better subplot arrangement\n",
    "plt.tight_layout()\n",
    "plt.savefig('emb_eff.png', dpi=300)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4320e954",
   "metadata": {},
   "source": [
    "## Load trained models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b4b54bbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Safa\\anaconda3\\lib\\site-packages\\torchvision\\models\\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.\n",
      "  warnings.warn(\n",
      "C:\\Users\\Safa\\anaconda3\\lib\\site-packages\\torchvision\\models\\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "C:\\Users\\Safa\\anaconda3\\lib\\site-packages\\torchvision\\models\\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n",
      "C:\\Users\\Safa\\anaconda3\\lib\\site-packages\\torchvision\\models\\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=VGG16_Weights.IMAGENET1K_V1`. You can also use `weights=VGG16_Weights.DEFAULT` to get the most up-to-date weights.\n",
      "  warnings.warn(msg)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Load models\n",
    "\n",
    "resnet = ResnetPrototypicalNetwork(input_size, hidden_size).to(device)\n",
    "\n",
    "resnet.load_state_dict(torch.load(\"ResNet_protonet.pth\"))\n",
    "\n",
    "resnet34 = Resnet34PrototypicalNetwork(input_size, hidden_size).to(device)\n",
    "\n",
    "resnet34.load_state_dict(torch.load(\"ResNet34_protonet.pth\"))\n",
    "\n",
    "vgg = VGGPrototypicalNetwork(128,4).to(device)\n",
    "\n",
    "vgg.load_state_dict(torch.load(\"VGG_protonet.pth\"))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "d616161c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.9563492063492064\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9811    0.9889    0.9850       630\n",
      "           1     1.0000    0.9286    0.9630       630\n",
      "           2     0.9614    0.9492    0.9553       630\n",
      "           3     0.8909    0.9587    0.9235       630\n",
      "\n",
      "    accuracy                         0.9563      2520\n",
      "   macro avg     0.9583    0.9563    0.9567      2520\n",
      "weighted avg     0.9583    0.9563    0.9567      2520\n",
      "\n",
      "Accuracy: 0.971031746031746\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9789    0.9587    0.9687       630\n",
      "           1     1.0000    1.0000    1.0000       630\n",
      "           2     0.9493    0.9810    0.9649       630\n",
      "           3     0.9566    0.9444    0.9505       630\n",
      "\n",
      "    accuracy                         0.9710      2520\n",
      "   macro avg     0.9712    0.9710    0.9710      2520\n",
      "weighted avg     0.9712    0.9710    0.9710      2520\n",
      "\n",
      "Accuracy: 0.9619047619047619\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9608    0.9730    0.9669       630\n",
      "           1     0.9984    0.9714    0.9847       630\n",
      "           2     0.9726    0.9587    0.9656       630\n",
      "           3     0.9182    0.9444    0.9311       630\n",
      "\n",
      "    accuracy                         0.9619      2520\n",
      "   macro avg     0.9625    0.9619    0.9621      2520\n",
      "weighted avg     0.9625    0.9619    0.9621      2520\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Set the models to evaluation mode\n",
    "resnet.eval()\n",
    "resnet34.eval()\n",
    "vgg.eval()\n",
    "optimizer = torch.optim.Adam(resnet.parameters(), lr=1e-4)\n",
    "\n",
    "# Initialize lists to store predictions and probabilities for each model\n",
    "all_resnet_preds = []\n",
    "all_resnet_labels = []\n",
    "all_resnet_probs = []\n",
    "\n",
    "all_resnet34_preds = []\n",
    "all_resnet34_labels = []\n",
    "all_resnet34_probs = []\n",
    "\n",
    "all_vgg_preds = []\n",
    "all_vgg_labels = []\n",
    "all_vgg_probs = []\n",
    "\n",
    "n_classes = 3\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "resnet_support_embeddings, resnet_support_labels = get_support_set_embeddings(test_loader, resnet)\n",
    "# Convert to PyTorch tensors\n",
    "resnet_support_embeddings = torch.tensor(resnet_support_embeddings).to(device)\n",
    "resnet_support_labels = torch.tensor(resnet_support_labels).to(device)\n",
    "# Compute the prototypes\n",
    "resnet_prototypes = compute_prototypes(resnet_support_embeddings, resnet_support_labels, n_classes)\n",
    "\n",
    "\n",
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "resnet34_support_embeddings, resnet34_support_labels = get_support_set_embeddings(test_loader, resnet34)\n",
    "# Convert to PyTorch tensors\n",
    "resnet34_support_embeddings = torch.tensor(resnet34_support_embeddings).to(device)\n",
    "resnet34_support_labels = torch.tensor(resnet34_support_labels).to(device)\n",
    "# Compute the prototypes\n",
    "resnet34_prototypes = compute_prototypes(resnet34_support_embeddings, resnet34_support_labels, n_classes)\n",
    "\n",
    "\n",
    "# Assuming you have a DataLoader named support_loader for the support set\n",
    "vgg_support_embeddings, vgg_support_labels = get_support_set_embeddings(test_loader, vgg)\n",
    "# Convert to PyTorch tensors\n",
    "vgg_support_embeddings = torch.tensor(vgg_support_embeddings).to(device)\n",
    "vgg_support_labels = torch.tensor(vgg_support_labels).to(device)\n",
    "# Compute the prototypes\n",
    "vgg_prototypes = compute_prototypes(vgg_support_embeddings, vgg_support_labels, n_classes)\n",
    "\n",
    "\n",
    "# In your evaluation loop\n",
    "with torch.no_grad():\n",
    "    \n",
    "    for features, labels in test_loader:\n",
    "        features, labels = features.to(device), labels.to(device)\n",
    "        resnet_query_embeddings = resnet(features)\n",
    "        preds, soft_assignments = classify_embeddings(resnet_query_embeddings, resnet_prototypes)\n",
    "        all_resnet_preds.extend(preds.cpu().numpy())\n",
    "        all_resnet_labels.extend(labels.cpu().numpy())\n",
    "        all_resnet_probs.extend(soft_assignments.cpu().numpy())  # Collect soft assignment probabilities\n",
    "\n",
    "        \n",
    "        resnet34_query_embeddings = resnet34(features)\n",
    "        preds, soft_assignments = classify_embeddings(resnet34_query_embeddings, resnet34_prototypes)\n",
    "        all_resnet34_preds.extend(preds.cpu().numpy())\n",
    "        all_resnet34_labels.extend(labels.cpu().numpy())\n",
    "        all_resnet34_probs.extend(soft_assignments.cpu().numpy())  # Collect soft assignment probabilities\n",
    "\n",
    "        vgg_query_embeddings = vgg(features)\n",
    "        preds, soft_assignments = classify_embeddings(vgg_query_embeddings, vgg_prototypes)\n",
    "        all_vgg_preds.extend(preds.cpu().numpy())\n",
    "        all_vgg_labels.extend(labels.cpu().numpy())\n",
    "        all_vgg_probs.extend(soft_assignments.cpu().numpy())  # Collect soft assignment probabilities\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9335ea62",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ResNet:\n",
      "Accuracy: 0.9698412698412698\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9679    0.9571    0.9625       630\n",
      "           1     1.0000    1.0000    1.0000       630\n",
      "           2     0.9583    0.9841    0.9710       630\n",
      "           3     0.9532    0.9381    0.9456       630\n",
      "\n",
      "    accuracy                         0.9698      2520\n",
      "   macro avg     0.9698    0.9698    0.9698      2520\n",
      "weighted avg     0.9698    0.9698    0.9698      2520\n",
      "\n",
      "ResNet34:\n",
      "Accuracy: 0.9607142857142857\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9657    0.9841    0.9748       630\n",
      "           1     1.0000    0.9571    0.9781       630\n",
      "           2     0.9618    0.9587    0.9603       630\n",
      "           3     0.9181    0.9429    0.9303       630\n",
      "\n",
      "    accuracy                         0.9607      2520\n",
      "   macro avg     0.9614    0.9607    0.9609      2520\n",
      "weighted avg     0.9614    0.9607    0.9609      2520\n",
      "\n",
      "VGG:\n",
      "Accuracy: 0.9757936507936508\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9823    0.9667    0.9744       630\n",
      "           1     0.9984    1.0000    0.9992       630\n",
      "           2     0.9729    0.9698    0.9714       630\n",
      "           3     0.9501    0.9667    0.9583       630\n",
      "\n",
      "    accuracy                         0.9758      2520\n",
      "   macro avg     0.9759    0.9758    0.9758      2520\n",
      "weighted avg     0.9759    0.9758    0.9758      2520\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Calculate accuracy and print results for ResNet\n",
    "accuracy_resnet = accuracy_score(all_resnet_labels, all_resnet_preds)\n",
    "print(\"ResNet:\")\n",
    "print(f'Accuracy: {accuracy_resnet}')\n",
    "print(classification_report(all_resnet_labels, all_resnet_preds, digits=4))\n",
    "\n",
    "# Calculate accuracy and print results for ResNet34\n",
    "accuracy_resnet34 = accuracy_score(all_resnet_labels, all_resnet34_preds)\n",
    "print(\"ResNet34:\")\n",
    "print(f'Accuracy: {accuracy_resnet34}')\n",
    "print(classification_report(all_resnet_labels, all_resnet34_preds, digits=4))\n",
    "\n",
    "# Calculate accuracy and print results for VGG\n",
    "accuracy_vgg = accuracy_score(all_resnet_labels, all_vgg_preds)\n",
    "print(\"VGG:\")\n",
    "print(f'Accuracy: {accuracy_vgg}')\n",
    "print(classification_report(all_resnet_labels, all_vgg_preds, digits=4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d771fd80",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Safa\\AppData\\Local\\Temp\\ipykernel_11508\\3467948101.py:11: FutureWarning: Unlike other reduction functions (e.g. `skew`, `kurtosis`), the default behavior of `mode` typically preserves the axis it acts along. In SciPy 1.11.0, this behavior will change: the default value of `keepdims` will become False, the `axis` over which the statistic is taken will be eliminated, and the value None will no longer be accepted. Set `keepdims` to True or False to avoid this warning.\n",
      "  mode_info = stats.mode(labels, axis = 1)\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats\n",
    "# Predict labels with models\n",
    "labels = []\n",
    "labels.append(all_resnet_preds)\n",
    "labels.append(all_resnet34_preds)\n",
    "labels.append(all_vgg_preds)\n",
    "labels=np.asarray(labels)\n",
    "x=labels.T\n",
    "labels = np.squeeze(x)\n",
    "###Mode Pdrediction\n",
    "mode_info = stats.mode(labels, axis = 1)\n",
    "f = np.squeeze(mode_info[0]) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5236bf01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hard Voting\n",
      " Accuracy:  0.9916666666666667\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0     0.9890    1.0000    0.9945       630\n",
      "           1     1.0000    1.0000    1.0000       630\n",
      "           2     0.9904    0.9857    0.9881       630\n",
      "           3     0.9872    0.9810    0.9841       630\n",
      "\n",
      "    accuracy                         0.9917      2520\n",
      "   macro avg     0.9917    0.9917    0.9917      2520\n",
      "weighted avg     0.9917    0.9917    0.9917      2520\n",
      "\n"
     ]
    }
   ],
   "source": [
    "all_resnet_labels\n",
    "accuracy=accuracy_score(all_resnet_labels, f)\n",
    "print(\"Hard Voting\\n Accuracy: \", accuracy)\n",
    "print(classification_report(all_resnet_labels, f, digits=4))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "02114af6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Mild', 'Moderate', 'Non', 'VeryMild']"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Assuming you have a PyTorch dataset object named 'dataset'\n",
    "class_names = dataset.classes\n",
    "class_names=['Mild', 'Moderate', 'Non', 'VeryMild']\n",
    "class_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e1c689e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 500x400 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.preprocessing import normalize\n",
    "\n",
    "# Calculate confusion matrix\n",
    "conf_matrix = confusion_matrix(all_resnet_labels, f)\n",
    "\n",
    "# Normalize confusion matrix\n",
    "conf_matrix_norm = normalize(conf_matrix, axis=1, norm='l1')\n",
    "\n",
    "# Define class labels\n",
    "classes = class_names\n",
    "\n",
    "# Plot normalized confusion matrix with a different colormap\n",
    "plt.figure(figsize=(5, 4))\n",
    "sns.set(font_scale=1.2)  # Adjust font scale for better readability\n",
    "sns.heatmap(conf_matrix_norm, annot=True, cmap='YlGnBu', fmt='.2f', xticklabels=classes, yticklabels=classes)\n",
    "plt.xlabel('Predicted Labels')\n",
    "plt.ylabel('True Labels')\n",
    "plt.title('Normalized Confusion Matrix')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f205e9d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c962734",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "976448ed",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca8597d3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9563ac38",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "1e075c60",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a90f192d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4e68be9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
